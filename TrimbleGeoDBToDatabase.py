# One goal of long term ecosystem monitoring programs is to preserve data in non-proprietary human and machine readable ASCII text file formats. Additionally, the U.S. government requires non-sensitive data to be publicly available in human and machine readable formats (see https://project-open-data.cio.gov/).
# ESRI geodatabases are highly functional for day to day use but are highly likely to be unsupported/unreadable decades in the future and do not meet open data requirements. The GeoDBToText tool prevents data loss by exporting each feature class in an ESRI personal geodatabase (.mdb) to human and machine text (pipe separated values/WKT, ESRI JSON) file formats. Should the original geodatabase be unusable the text files generated by this tool should still be recoverable. The National Park Service Arctic and Central Alaska Inventory and Monitoring Networks archive proprietary geospatial datasets in tandem with human and machine readable text file formats.
# Written by Scott D. Miller, Data manager, National Park Service Arctic Network Inventory and Monitoring Program, Fairbanks, AK. https://www.nps.gov/im/arcn/index.htm

# Exports each featureclass in the submitted geodatabase to  human and machine readable text and JSON files.
# Export files are created in the same directory as the input geodatabase

#Written by Scott D. Miller
#National Park Service, Arctic and Central Alaska Inventory and Monitoring programs
#2019-06-15

# Imports
import arcpy
import os
import csv


# Input parameters
GeoDB = arcpy.GetParameterAsText(0) # The input geodatabase (Workspace)

# set the workspace
arcpy.env.workspace = GeoDB

# Function to export a featureclass as a json file
def ExportJSON(FeatureClass):
    try:
        # This will be the output json file
        JsonFile = os.path.dirname(arcpy.env.workspace) + '\\' + FeatureClass + '.json'
        
        # If the json file exists already then delete it 
        if os.path.exists(JsonFile):
            arcpy.AddMessage("File exists: " + JsonFile + '. Deleted')
            os.remove(JsonFile)

        # Export the FeatureClass
        arcpy.AddMessage("Exporting " + JsonFile)
        arcpy.FeaturesToJSON_conversion(FeatureClass, JsonFile, "NOT_FORMATTED")
    except Exception as e:
        arcpy.AddMessage('Export failed for FeatureClass: ' + FeatureClass + ' ' + str(e))


# loop through all the feature classes in the geodatabase and export them to json files
try:
    FeatureClasses = arcpy.ListFeatureClasses()
    for FeatureClass in FeatureClasses:
        arcpy.AddMessage("Processing " + FeatureClass)
        ExportCSV(FeatureClass)
        ExportJSON(FeatureClass)
except Exception as e:
    arcpy.AddMessage('Error: ' + str(e))

